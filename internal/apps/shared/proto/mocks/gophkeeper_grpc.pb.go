// Code generated by MockGen. DO NOT EDIT.
// Source: gophkeeper_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=gophkeeper_grpc.pb.go -destination=mocks/gophkeeper_grpc.pb.go -package mocks UserServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/dlomanov/gophkeeper/internal/apps/shared/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockUserServiceClient) SignIn(ctx context.Context, in *proto.SignInUserRequest, opts ...grpc.CallOption) (*proto.SignInUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignIn", varargs...)
	ret0, _ := ret[0].(*proto.SignInUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserServiceClientMockRecorder) SignIn(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUserServiceClient)(nil).SignIn), varargs...)
}

// SignUp mocks base method.
func (m *MockUserServiceClient) SignUp(ctx context.Context, in *proto.SignUpUserRequest, opts ...grpc.CallOption) (*proto.SignUpUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUp", varargs...)
	ret0, _ := ret[0].(*proto.SignUpUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserServiceClientMockRecorder) SignUp(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserServiceClient)(nil).SignUp), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockUserServiceServer) SignIn(arg0 context.Context, arg1 *proto.SignInUserRequest) (*proto.SignInUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(*proto.SignInUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserServiceServerMockRecorder) SignIn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUserServiceServer)(nil).SignIn), arg0, arg1)
}

// SignUp mocks base method.
func (m *MockUserServiceServer) SignUp(arg0 context.Context, arg1 *proto.SignUpUserRequest) (*proto.SignUpUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(*proto.SignUpUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserServiceServerMockRecorder) SignUp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserServiceServer)(nil).SignUp), arg0, arg1)
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockUnsafeUserServiceServer is a mock of UnsafeUserServiceServer interface.
type MockUnsafeUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServiceServerMockRecorder
}

// MockUnsafeUserServiceServerMockRecorder is the mock recorder for MockUnsafeUserServiceServer.
type MockUnsafeUserServiceServerMockRecorder struct {
	mock *MockUnsafeUserServiceServer
}

// NewMockUnsafeUserServiceServer creates a new mock instance.
func NewMockUnsafeUserServiceServer(ctrl *gomock.Controller) *MockUnsafeUserServiceServer {
	mock := &MockUnsafeUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServiceServer) EXPECT() *MockUnsafeUserServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUnsafeUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUnsafeUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUnsafeUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockEntryServiceClient is a mock of EntryServiceClient interface.
type MockEntryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEntryServiceClientMockRecorder
}

// MockEntryServiceClientMockRecorder is the mock recorder for MockEntryServiceClient.
type MockEntryServiceClientMockRecorder struct {
	mock *MockEntryServiceClient
}

// NewMockEntryServiceClient creates a new mock instance.
func NewMockEntryServiceClient(ctrl *gomock.Controller) *MockEntryServiceClient {
	mock := &MockEntryServiceClient{ctrl: ctrl}
	mock.recorder = &MockEntryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryServiceClient) EXPECT() *MockEntryServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEntryServiceClient) Create(ctx context.Context, in *proto.CreateEntryRequest, opts ...grpc.CallOption) (*proto.CreateEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*proto.CreateEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEntryServiceClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEntryServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockEntryServiceClient) Delete(ctx context.Context, in *proto.DeleteEntryRequest, opts ...grpc.CallOption) (*proto.DeleteEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*proto.DeleteEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockEntryServiceClientMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEntryServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockEntryServiceClient) Get(ctx context.Context, in *proto.GetEntryRequest, opts ...grpc.CallOption) (*proto.GetEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*proto.GetEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEntryServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEntryServiceClient)(nil).Get), varargs...)
}

// GetAll mocks base method.
func (m *MockEntryServiceClient) GetAll(ctx context.Context, in *proto.GetEntriesRequest, opts ...grpc.CallOption) (*proto.GetEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*proto.GetEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEntryServiceClientMockRecorder) GetAll(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEntryServiceClient)(nil).GetAll), varargs...)
}

// GetDiff mocks base method.
func (m *MockEntryServiceClient) GetDiff(ctx context.Context, in *proto.GetEntriesDiffRequest, opts ...grpc.CallOption) (*proto.GetEntriesDiffResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDiff", varargs...)
	ret0, _ := ret[0].(*proto.GetEntriesDiffResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiff indicates an expected call of GetDiff.
func (mr *MockEntryServiceClientMockRecorder) GetDiff(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiff", reflect.TypeOf((*MockEntryServiceClient)(nil).GetDiff), varargs...)
}

// Update mocks base method.
func (m *MockEntryServiceClient) Update(ctx context.Context, in *proto.UpdateEntryRequest, opts ...grpc.CallOption) (*proto.UpdateEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*proto.UpdateEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEntryServiceClientMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEntryServiceClient)(nil).Update), varargs...)
}

// MockEntryServiceServer is a mock of EntryServiceServer interface.
type MockEntryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEntryServiceServerMockRecorder
}

// MockEntryServiceServerMockRecorder is the mock recorder for MockEntryServiceServer.
type MockEntryServiceServerMockRecorder struct {
	mock *MockEntryServiceServer
}

// NewMockEntryServiceServer creates a new mock instance.
func NewMockEntryServiceServer(ctrl *gomock.Controller) *MockEntryServiceServer {
	mock := &MockEntryServiceServer{ctrl: ctrl}
	mock.recorder = &MockEntryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryServiceServer) EXPECT() *MockEntryServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEntryServiceServer) Create(arg0 context.Context, arg1 *proto.CreateEntryRequest) (*proto.CreateEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreateEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEntryServiceServerMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEntryServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockEntryServiceServer) Delete(arg0 context.Context, arg1 *proto.DeleteEntryRequest) (*proto.DeleteEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockEntryServiceServerMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEntryServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockEntryServiceServer) Get(arg0 context.Context, arg1 *proto.GetEntryRequest) (*proto.GetEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEntryServiceServerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEntryServiceServer)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockEntryServiceServer) GetAll(arg0 context.Context, arg1 *proto.GetEntriesRequest) (*proto.GetEntriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEntryServiceServerMockRecorder) GetAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEntryServiceServer)(nil).GetAll), arg0, arg1)
}

// GetDiff mocks base method.
func (m *MockEntryServiceServer) GetDiff(arg0 context.Context, arg1 *proto.GetEntriesDiffRequest) (*proto.GetEntriesDiffResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiff", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetEntriesDiffResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiff indicates an expected call of GetDiff.
func (mr *MockEntryServiceServerMockRecorder) GetDiff(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiff", reflect.TypeOf((*MockEntryServiceServer)(nil).GetDiff), arg0, arg1)
}

// Update mocks base method.
func (m *MockEntryServiceServer) Update(arg0 context.Context, arg1 *proto.UpdateEntryRequest) (*proto.UpdateEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEntryServiceServerMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEntryServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedEntryServiceServer mocks base method.
func (m *MockEntryServiceServer) mustEmbedUnimplementedEntryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEntryServiceServer")
}

// mustEmbedUnimplementedEntryServiceServer indicates an expected call of mustEmbedUnimplementedEntryServiceServer.
func (mr *MockEntryServiceServerMockRecorder) mustEmbedUnimplementedEntryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEntryServiceServer", reflect.TypeOf((*MockEntryServiceServer)(nil).mustEmbedUnimplementedEntryServiceServer))
}

// MockUnsafeEntryServiceServer is a mock of UnsafeEntryServiceServer interface.
type MockUnsafeEntryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEntryServiceServerMockRecorder
}

// MockUnsafeEntryServiceServerMockRecorder is the mock recorder for MockUnsafeEntryServiceServer.
type MockUnsafeEntryServiceServerMockRecorder struct {
	mock *MockUnsafeEntryServiceServer
}

// NewMockUnsafeEntryServiceServer creates a new mock instance.
func NewMockUnsafeEntryServiceServer(ctrl *gomock.Controller) *MockUnsafeEntryServiceServer {
	mock := &MockUnsafeEntryServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEntryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEntryServiceServer) EXPECT() *MockUnsafeEntryServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEntryServiceServer mocks base method.
func (m *MockUnsafeEntryServiceServer) mustEmbedUnimplementedEntryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEntryServiceServer")
}

// mustEmbedUnimplementedEntryServiceServer indicates an expected call of mustEmbedUnimplementedEntryServiceServer.
func (mr *MockUnsafeEntryServiceServerMockRecorder) mustEmbedUnimplementedEntryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEntryServiceServer", reflect.TypeOf((*MockUnsafeEntryServiceServer)(nil).mustEmbedUnimplementedEntryServiceServer))
}
